{"version":3,"file":"static/js/424.c99db39b.chunk.js","mappings":"kOAmDA,UA1CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA+CE,EAAAA,EAAAA,MAAvCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,SAElC,GAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAoBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,oGAEIN,EAAUO,EAAAA,GAAAA,SAFd,SAGuBC,EAAAA,GAA8BZ,GAHrD,OAGUa,EAHV,OAKIJ,EAAWI,GACXT,EAAUO,EAAAA,GAAAA,UANd,gDAQIL,EAAS,EAAD,IACRF,EAAUO,EAAAA,GAAAA,UATd,0DAHc,0DAgBdG,KACC,CAACd,EAASM,EAAUF,KAGrB,iCACE,SAAC,KAAD,CAAcD,OAAQA,EAAQE,MAAOA,IAEpCG,GACCA,EAAQO,QAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAClB,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,MAKZT,GAAsC,IAA3BA,EAAQO,QAAQK,SAC1B,uE,sJCzCKC,EAAS,WACpB,OACE,SAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,SAAnC,UACE,SAAC,KAAD,CACEC,OAAQ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,QAC5BC,OAAQ,GACRC,MAAO,GACPC,UAAU,e,SCPZrB,EAAS,CACbsB,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,YAGNlC,EAAkB,WACtB,OAA4BK,EAAAA,EAAAA,UAASI,EAAOsB,MAA5C,eAAO9B,EAAP,KAAeC,EAAf,KACA,GAA0BG,EAAAA,EAAAA,UAAS,CAAE8B,QAAS,KAA9C,eACA,MAAO,CAAElC,OAAAA,EAAQC,UAAAA,EAAWC,MAD5B,KACmCC,SADnC,OAIIgC,EAAe,SAAC,GAAuB,IAArBnC,EAAoB,EAApBA,OAAQE,EAAY,EAAZA,MAC9B,OACE,gCACc,YAAXF,IAAwB,SAACkB,EAAD,IACb,aAAXlB,IACC,SAACmB,EAAA,EAAD,CAAKiB,MAAM,MAAMC,UAAU,SAA3B,SACGnC,EAAMgC,e,4JCvBXI,EAAW,+BAEXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAkCC,EAAlC,+BAAwC,GAAIC,EAA5C,+BAAqD,GAArD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAmB,GAAD,OAAIF,EAAJ,uCAA2CC,IAS/D,SAASY,EAAgBrC,GAC9B,OAAO0B,EAAmB,GAAD,OACpBF,EADoB,kBACFxB,EADE,oBACYyB,EADZ,oBAKpB,SAASa,EAAgBtC,GAC9B,OAAO0B,EAAmB,GAAD,OACpBF,EADoB,kBACFxB,EADE,4BACoByB,EADpB,oBAKpB,SAASc,EAAgBvC,GAAe,IAAXwC,EAAU,uDAAH,EACzC,OAAOd,EAAmB,GAAD,OACpBF,EADoB,kBACFxB,EADE,4BACoByB,EADpB,gCAC+Ce","sources":["components/Reviews/Reviews.jsx","components/Loader/Loader.jsx","components/StateMachine/StateMachine.jsx","services/themoviedb.org-API.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as themoviedbAPI from 'services/themoviedb.org-API';\nimport {\n  Status,\n  StateMachine,\n  useStateMachine,\n} from 'components/StateMachine/StateMachine';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const { status, setStatus, error, setError } = useStateMachine();\n\n  const [reviews, setReviews] = useState(null);\n  useEffect(() => {\n    // themoviedbAPI.getMovieReviews(movieId).then(setReviews);\n\n    async function fetchReviews() {\n      try {\n        setStatus(Status.PENDING);\n        const data = await themoviedbAPI.getMovieReviews(movieId);\n\n        setReviews(data);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(Status.REJECTED);\n      }\n    }\n\n    fetchReviews();\n  }, [movieId, setError, setStatus]);\n\n  return (\n    <>\n      <StateMachine status={status} error={error} />\n\n      {reviews &&\n        reviews.results.map(({ id, author, content }) => (\n          <li key={id}>\n            <h3>Author: {author}</h3>\n            <p>{content}</p>\n          </li>\n        ))}\n      {reviews && reviews.results.length === 0 && (\n        <p>There isn`t any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { BallTriangle } from 'react-loader-spinner';\nimport { Box } from 'styleConfig/Box';\n\nexport const Loader = () => {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <BallTriangle\n        hcolor={p => p.theme.colors.loader}\n        height={80}\n        width={80}\n        ariaLabel=\"loading\"\n      />\n    </Box>\n  );\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { useState } from 'react';\nimport { Box } from 'styleConfig/Box';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst useStateMachine = () => {\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState({ message: '' });\n  return { status, setStatus, error, setError };\n};\n\nconst StateMachine = ({ status, error }) => {\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && (\n        <Box color=\"red\" textAlign=\"center\">\n          {error.message}\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport { Status, StateMachine, useStateMachine };\n","const BASE_URL = 'https://api.themoviedb.org/3';\n\nconst KEY = 'c24a579521956747b362db1dbfab545a';\n\nasync function fetchErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not Found'));\n}\n\nexport function getTrending() {\n  return fetchErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\nexport function searchMovies(query = 'cat', page = 1) {\n  return fetchErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&region=US&include_adult=false&query=${query}&page=${page}`\n  );\n}\n\nexport function getMovieDetails(id) {\n  return fetchErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function getMovieCredits(id) {\n  return fetchErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function getMovieReviews(id, page = 1) {\n  return fetchErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=${page}`\n  );\n}\n"],"names":["movieId","useParams","useStateMachine","status","setStatus","error","setError","useState","reviews","setReviews","useEffect","Status","themoviedbAPI","data","fetchReviews","results","map","id","author","content","length","Loader","Box","display","justifyContent","hcolor","p","theme","colors","loader","height","width","ariaLabel","IDLE","PENDING","RESOLVED","REJECTED","message","StateMachine","color","textAlign","BASE_URL","KEY","fetchErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","getTrending","getMovieDetails","getMovieCredits","getMovieReviews","page"],"sourceRoot":""}